@page "/add-product"
@using ProductManagement.Business
@using ProductManagement.Model
@using ProductManagement.Provider
<link rel="stylesheet" href="css/addProduct.css">

<h3>Add New Product</h3>

<EditForm Model="@newProduct" OnValidSubmit="HandleValidSubmit" FormName="Add">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="name">Product Name</label>
        <InputText id="name" class="form-control" @bind-Value="newProduct.Name" />
    </div>

    <div class="form-group">
        <label for="description">Description</label>
        <InputTextArea id="description" class="form-control" @bind-Value="newProduct.Description" />
    </div>

    <div class="form-group">
        <label for="price">Price</label>
        <InputNumber id="price" class="form-control" @bind-Value="newProduct.Price" />
    </div>

    <div class="form-group">
        <label for="category">Category</label>
        <InputSelect id="category" class="form-control" @bind-Value="newProduct.CategoryId">
            <option value="">Select Category</option>
            @foreach (var category in newProduct.CategoryList)
            {
                <option value="@category.Id">@category.Name</option>
            }
        </InputSelect>
    </div>

    <button type="submit" class="btn btn-primary">Add Product</button>
</EditForm>

@code {
    private Products newProduct = new Products();

    [Inject]
    public ProductService ProductService { get; set; }

    [Inject]
    private NavigationManager NavigationManager { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var response = await ProductService.Get<Category>(0);
        newProduct.CategoryList = TypeHelper.SafeCastToList<Category>(response.Data);

        if (!newProduct.CategoryList.Any())
        {
            newProduct.CategoryList = await ProductService.SaveProductCategories();
        }
    }

    private async Task HandleValidSubmit()
    {
        if (newProduct != null && !string.IsNullOrWhiteSpace(newProduct.Name) && !string.IsNullOrWhiteSpace(newProduct.Description))
        {
            var response = await ProductService.Save(newProduct);

            if (response.Status == (byte)StatusFlags.Success)
            {
                NavigationManager.NavigateTo("/index");
            }
            else
            {
                Console.WriteLine($"Error: {response.Message}");
            }
        }
        else
        {
            Console.WriteLine("Product is not valid.");
        }
    }
}